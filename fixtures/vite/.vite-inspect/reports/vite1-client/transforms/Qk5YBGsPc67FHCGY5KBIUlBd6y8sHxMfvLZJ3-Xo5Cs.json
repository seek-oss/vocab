{
  "resolvedId": "/Users/askoufis/code/vocab/fixtures/vite/src/client.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { VocabProvider, useTranslations } from '@vocab/react';\nimport type { TranslationKeys } from '@vocab/core';\nimport React, { type ReactNode, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport commonTranslations from './.vocab';\nimport clientTranslations from './client.vocab';\n\ntype CommonTranslationKeys = TranslationKeys<typeof commonTranslations>;\n\nconst useCommonTranslation = (key: CommonTranslationKeys) => {\n  const { t } = useTranslations(commonTranslations);\n\n  return t(key);\n};\n\nfunction Content() {\n  const common = useTranslations(commonTranslations);\n  const client = useTranslations(clientTranslations);\n  const message = `${common.t('hello')} ${useCommonTranslation('world')}`;\n  const specialCharacterResult = client.t(\n    'specialCharacters - \\'‘’“”\"!@#$%^&*()_+\\\\/`~\\\\\\\\',\n  );\n  const vocabPublishNode = client.t('vocabPublishDate', {\n    publishDate: 1605847714000,\n    strong: (children: ReactNode) => <strong>{children}</strong>,\n  });\n\n  return (\n    <>\n      <div id=\"message\">{message}</div>\n      <div id=\"publish-date\">{vocabPublishNode}</div>\n      <div id=\"special-characters\">\n        Special Characters: {specialCharacterResult}\n      </div>\n    </>\n  );\n}\n\nfunction App({ children }: { children: ReactNode }) {\n  const [lang, setLang] = useState('en');\n  const [locale, setLocale] = useState('en-AU');\n\n  const theLocale = lang === 'en' ? locale : undefined;\n\n  return (\n    <VocabProvider language={lang} locale={theLocale}>\n      {children}\n      <label htmlFor=\"languages\">Language:</label>\n      <select\n        name=\"languages\"\n        id=\"language-select\"\n        onChange={(event) => {\n          setLang(event.currentTarget.value);\n        }}\n      >\n        <option value=\"en\">en</option>\n        <option value=\"fr\">fr</option>\n        <option value=\"pseudo\">pseudo</option>\n      </select>\n      {lang === 'en' ? (\n        <button\n          id=\"toggle-locale\"\n          onClick={() =>\n            setLocale((curr) => (curr === 'en-AU' ? 'en-US' : 'en-AU'))\n          }\n        >\n          Toggle locale: {locale}\n        </button>\n      ) : null}\n    </VocabProvider>\n  );\n}\n\nconst node = document.createElement('div');\n\ndocument.body.appendChild(node);\n\ncreateRoot(node).render(\n  <App>\n    <Content />\n  </App>,\n);\n",
      "start": 1758604115970,
      "end": 1758604115971,
      "sourcemaps": null
    },
    {
      "name": "vite-plugin-vocab",
      "start": 1758604115971,
      "end": 1758604115971,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { VocabProvider, useTranslations } from \"@vocab/react\";\nimport React, { useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport commonTranslations from \"./.vocab\";\nimport clientTranslations from \"./client.vocab\";\nconst useCommonTranslation = (key) => {\n  const { t } = useTranslations(commonTranslations);\n  return t(key);\n};\nfunction Content() {\n  const common = useTranslations(commonTranslations);\n  const client = useTranslations(clientTranslations);\n  const message = `${common.t(\"hello\")} ${useCommonTranslation(\"world\")}`;\n  const specialCharacterResult = client.t(\n    \"specialCharacters - '‘’“”\\\"!@#$%^&*()_+\\\\/`~\\\\\\\\\"\n  );\n  const vocabPublishNode = client.t(\"vocabPublishDate\", {\n    publishDate: 1605847714e3,\n    strong: (children) => /* @__PURE__ */ React.createElement(\"strong\", null, children)\n  });\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"div\", { id: \"message\" }, message), /* @__PURE__ */ React.createElement(\"div\", { id: \"publish-date\" }, vocabPublishNode), /* @__PURE__ */ React.createElement(\"div\", { id: \"special-characters\" }, \"Special Characters: \", specialCharacterResult));\n}\nfunction App({ children }) {\n  const [lang, setLang] = useState(\"en\");\n  const [locale, setLocale] = useState(\"en-AU\");\n  const theLocale = lang === \"en\" ? locale : void 0;\n  return /* @__PURE__ */ React.createElement(VocabProvider, { language: lang, locale: theLocale }, children, /* @__PURE__ */ React.createElement(\"label\", { htmlFor: \"languages\" }, \"Language:\"), /* @__PURE__ */ React.createElement(\n    \"select\",\n    {\n      name: \"languages\",\n      id: \"language-select\",\n      onChange: (event) => {\n        setLang(event.currentTarget.value);\n      }\n    },\n    /* @__PURE__ */ React.createElement(\"option\", { value: \"en\" }, \"en\"),\n    /* @__PURE__ */ React.createElement(\"option\", { value: \"fr\" }, \"fr\"),\n    /* @__PURE__ */ React.createElement(\"option\", { value: \"pseudo\" }, \"pseudo\")\n  ), lang === \"en\" ? /* @__PURE__ */ React.createElement(\n    \"button\",\n    {\n      id: \"toggle-locale\",\n      onClick: () => setLocale((curr) => curr === \"en-AU\" ? \"en-US\" : \"en-AU\")\n    },\n    \"Toggle locale: \",\n    locale\n  ) : null);\n}\nconst node = document.createElement(\"div\");\ndocument.body.appendChild(node);\ncreateRoot(node).render(\n  /* @__PURE__ */ React.createElement(App, null, /* @__PURE__ */ React.createElement(Content, null))\n);\n",
      "start": 1758604115971,
      "end": 1758604115974,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/askoufis/code/vocab/fixtures/vite/src/client.tsx"
        ],
        "sourcesContent": [
          "import { VocabProvider, useTranslations } from '@vocab/react';\nimport type { TranslationKeys } from '@vocab/core';\nimport React, { type ReactNode, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport commonTranslations from './.vocab';\nimport clientTranslations from './client.vocab';\n\ntype CommonTranslationKeys = TranslationKeys<typeof commonTranslations>;\n\nconst useCommonTranslation = (key: CommonTranslationKeys) => {\n  const { t } = useTranslations(commonTranslations);\n\n  return t(key);\n};\n\nfunction Content() {\n  const common = useTranslations(commonTranslations);\n  const client = useTranslations(clientTranslations);\n  const message = `${common.t('hello')} ${useCommonTranslation('world')}`;\n  const specialCharacterResult = client.t(\n    'specialCharacters - \\'‘’“”\"!@#$%^&*()_+\\\\/`~\\\\\\\\',\n  );\n  const vocabPublishNode = client.t('vocabPublishDate', {\n    publishDate: 1605847714000,\n    strong: (children: ReactNode) => <strong>{children}</strong>,\n  });\n\n  return (\n    <>\n      <div id=\"message\">{message}</div>\n      <div id=\"publish-date\">{vocabPublishNode}</div>\n      <div id=\"special-characters\">\n        Special Characters: {specialCharacterResult}\n      </div>\n    </>\n  );\n}\n\nfunction App({ children }: { children: ReactNode }) {\n  const [lang, setLang] = useState('en');\n  const [locale, setLocale] = useState('en-AU');\n\n  const theLocale = lang === 'en' ? locale : undefined;\n\n  return (\n    <VocabProvider language={lang} locale={theLocale}>\n      {children}\n      <label htmlFor=\"languages\">Language:</label>\n      <select\n        name=\"languages\"\n        id=\"language-select\"\n        onChange={(event) => {\n          setLang(event.currentTarget.value);\n        }}\n      >\n        <option value=\"en\">en</option>\n        <option value=\"fr\">fr</option>\n        <option value=\"pseudo\">pseudo</option>\n      </select>\n      {lang === 'en' ? (\n        <button\n          id=\"toggle-locale\"\n          onClick={() =>\n            setLocale((curr) => (curr === 'en-AU' ? 'en-US' : 'en-AU'))\n          }\n        >\n          Toggle locale: {locale}\n        </button>\n      ) : null}\n    </VocabProvider>\n  );\n}\n\nconst node = document.createElement('div');\n\ndocument.body.appendChild(node);\n\ncreateRoot(node).render(\n  <App>\n    <Content />\n  </App>,\n);\n"
        ],
        "mappings": "AAAA,SAAS,eAAe,uBAAuB;AAE/C,OAAO,SAAyB,gBAAgB;AAChD,SAAS,kBAAkB;AAE3B,OAAO,wBAAwB;AAC/B,OAAO,wBAAwB;AAI/B,MAAM,uBAAuB,CAAC,QAA+B;AAC3D,QAAM,EAAE,EAAE,IAAI,gBAAgB,kBAAkB;AAEhD,SAAO,EAAE,GAAG;AACd;AAEA,SAAS,UAAU;AACjB,QAAM,SAAS,gBAAgB,kBAAkB;AACjD,QAAM,SAAS,gBAAgB,kBAAkB;AACjD,QAAM,UAAU,GAAG,OAAO,EAAE,OAAO,CAAC,IAAI,qBAAqB,OAAO,CAAC;AACrE,QAAM,yBAAyB,OAAO;AAAA,IACpC;AAAA,EACF;AACA,QAAM,mBAAmB,OAAO,EAAE,oBAAoB;AAAA,IACpD,aAAa;AAAA,IACb,QAAQ,CAAC,aAAwB,oCAAC,gBAAQ,QAAS;AAAA,EACrD,CAAC;AAED,SACE,0DACE,oCAAC,SAAI,IAAG,aAAW,OAAQ,GAC3B,oCAAC,SAAI,IAAG,kBAAgB,gBAAiB,GACzC,oCAAC,SAAI,IAAG,wBAAqB,wBACN,sBACvB,CACF;AAEJ;AAEA,SAAS,IAAI,EAAE,SAAS,GAA4B;AAClD,QAAM,CAAC,MAAM,OAAO,IAAI,SAAS,IAAI;AACrC,QAAM,CAAC,QAAQ,SAAS,IAAI,SAAS,OAAO;AAE5C,QAAM,YAAY,SAAS,OAAO,SAAS;AAE3C,SACE,oCAAC,iBAAc,UAAU,MAAM,QAAQ,aACpC,UACD,oCAAC,WAAM,SAAQ,eAAY,WAAS,GACpC;AAAA,IAAC;AAAA;AAAA,MACC,MAAK;AAAA,MACL,IAAG;AAAA,MACH,UAAU,CAAC,UAAU;AACnB,gBAAQ,MAAM,cAAc,KAAK;AAAA,MACnC;AAAA;AAAA,IAEA,oCAAC,YAAO,OAAM,QAAK,IAAE;AAAA,IACrB,oCAAC,YAAO,OAAM,QAAK,IAAE;AAAA,IACrB,oCAAC,YAAO,OAAM,YAAS,QAAM;AAAA,EAC/B,GACC,SAAS,OACR;AAAA,IAAC;AAAA;AAAA,MACC,IAAG;AAAA,MACH,SAAS,MACP,UAAU,CAAC,SAAU,SAAS,UAAU,UAAU,OAAQ;AAAA;AAAA,IAE7D;AAAA,IACiB;AAAA,EAClB,IACE,IACN;AAEJ;AAEA,MAAM,OAAO,SAAS,cAAc,KAAK;AAEzC,SAAS,KAAK,YAAY,IAAI;AAE9B,WAAW,IAAI,EAAE;AAAA,EACf,oCAAC,WACC,oCAAC,aAAQ,CACX;AACF;",
        "names": []
      }
    },
    {
      "name": "vite:define",
      "start": 1758604115974,
      "end": 1758604115974,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1758604115974,
      "end": 1758604115975,
      "order": "normal"
    }
  ]
}
