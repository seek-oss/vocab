{
  "resolvedId": "\u0000vite/preload-helper.js",
  "transforms": [
    {
      "name": "vite:build-import-analysis",
      "result": "const scriptRel = 'modulepreload';const assetsURL = function(dep) { return \"/\"+dep };const seen = {};export const __vitePreload = function preload(baseModule, deps, importerUrl) {\n\tlet promise = Promise.resolve();\n\tif (__VITE_IS_MODERN__ && deps && deps.length > 0) {\n\t\tconst links = document.getElementsByTagName(\"link\");\n\t\tconst cspNonceMeta = document.querySelector(\"meta[property=csp-nonce]\");\n\t\tconst cspNonce = cspNonceMeta?.nonce || cspNonceMeta?.getAttribute(\"nonce\");\n\t\tfunction allSettled(promises$2) {\n\t\t\treturn Promise.all(promises$2.map((p) => Promise.resolve(p).then((value$1) => ({\n\t\t\t\tstatus: \"fulfilled\",\n\t\t\t\tvalue: value$1\n\t\t\t}), (reason) => ({\n\t\t\t\tstatus: \"rejected\",\n\t\t\t\treason\n\t\t\t}))));\n\t\t}\n\t\tpromise = allSettled(deps.map((dep) => {\n\t\t\tdep = assetsURL(dep, importerUrl);\n\t\t\tif (dep in seen) return;\n\t\t\tseen[dep] = true;\n\t\t\tconst isCss = dep.endsWith(\".css\");\n\t\t\tconst cssSelector = isCss ? \"[rel=\\\"stylesheet\\\"]\" : \"\";\n\t\t\tconst isBaseRelative = !!importerUrl;\n\t\t\tif (isBaseRelative) for (let i$1 = links.length - 1; i$1 >= 0; i$1--) {\n\t\t\t\tconst link$1 = links[i$1];\n\t\t\t\tif (link$1.href === dep && (!isCss || link$1.rel === \"stylesheet\")) return;\n\t\t\t}\n\t\t\telse if (document.querySelector(`link[href=\"${dep}\"]${cssSelector}`)) return;\n\t\t\tconst link = document.createElement(\"link\");\n\t\t\tlink.rel = isCss ? \"stylesheet\" : scriptRel;\n\t\t\tif (!isCss) link.as = \"script\";\n\t\t\tlink.crossOrigin = \"\";\n\t\t\tlink.href = dep;\n\t\t\tif (cspNonce) link.setAttribute(\"nonce\", cspNonce);\n\t\t\tdocument.head.appendChild(link);\n\t\t\tif (isCss) return new Promise((res, rej) => {\n\t\t\t\tlink.addEventListener(\"load\", res);\n\t\t\t\tlink.addEventListener(\"error\", () => rej(/* @__PURE__ */ new Error(`Unable to preload CSS for ${dep}`)));\n\t\t\t});\n\t\t}));\n\t}\n\tfunction handlePreloadError(err$2) {\n\t\tconst e$1 = new Event(\"vite:preloadError\", { cancelable: true });\n\t\te$1.payload = err$2;\n\t\twindow.dispatchEvent(e$1);\n\t\tif (!e$1.defaultPrevented) throw err$2;\n\t}\n\treturn promise.then((res) => {\n\t\tfor (const item of res || []) {\n\t\t\tif (item.status !== \"rejected\") continue;\n\t\t\thandlePreloadError(item.reason);\n\t\t}\n\t\treturn baseModule().catch(handlePreloadError);\n\t});\n}",
      "start": 1758604115999,
      "end": 1758604115999
    }
  ]
}
